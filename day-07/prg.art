define :hand [
	type
	cards
	bid
	val
][
	compare: 'val
]

type: function [h][
	s: size (unique h)
	ss: sort h
	if s=1 ->
		return 7
	if s=2 [
		if ss\1=ss\3 ->
			return 6
		return 5
	]
	if s=3 [
		if ss\0=ss\1 [
			if ss\1=ss\2 ->
				return 4
			return 3
		]
		if ss\2=ss\3 ->
			return 4
		return 3
	]
	if s=4 ->
		return 2
	if s=5 ->
		return 1
]

maxtype: function [h][
	if? contains? h `J` [
		ind: index h `J`
		pos: to [:char] "23456789TQKA"
		x: 0
		loop pos 'p [
			set h ind p
			t: maxtype h
			if t>x -> x: t
		]
		set h ind `J`
		return x
		
	]
	else [
		return (type h)
	]
]

rank: function [c][
	if c=`A` -> return 14
	if c=`K` -> return 13
	if c=`Q` -> return 12
	if c=`J` -> return 11
	if c=`T` -> return 10
	if c=`9` -> return 9
	if c=`8` -> return 8
	if c=`7` -> return 7
	if c=`6` -> return 6
	if c=`5` -> return 5
	if c=`4` -> return 4
	if c=`3` -> return 3
	if c=`2` -> return 2
	if c=`1` -> return 1
]

rankhand: function [h][
	arr: new []
	loop h 'c [
		'arr ++ (rank c)
	]
	return arr
]

joker: function [h][
	arr: new []
	loop h 'c [
		if? c=`J` -> 'arr ++ `1`
		else -> 'arr ++ c
	]
	return arr
]

value: function [t h][
	hr: rankhand h
	return (hr\4) + (20*(hr\3)) + (400*(hr\2)) + (8000*(hr\1)) + (160000*(hr\0)) + (3200000*t)
]

winning: function [hs][
	sort 'hs
	w: 0
	loop.with:'i hs 'h [
		'w + (i + 1) * h\bid
	]
	print w
]

lines: split.lines (strip (read arg\0))

hands: new[]
loop lines 'line [
	handbid: split.words line
	hand: to [:char] handbid\0
	bid: to :integer handbid\1
	t: type hand
	val: value t hand
	'hands ++ to :hand [t hand bid val]
]

; print hands
winning hands

newhands: new[]
loop hands 'old [
	hand: joker (old\cards)
	t: maxtype (old\cards)
	val: value t hand
	'newhands ++ to :hand [t hand old\bid val]
]

;print newhands
winning newhands
